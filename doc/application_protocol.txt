# JumpSuit's protocol specification

Messages are serialized with a custom protocol before being sent. This document references JumpSuit's protocol.
Strings used by the JumpSuit's protocol are always encoded as UTF-8.

## Notation

Possible values for a field are noted:
 * with a number for the packet type (ex: 4)
 * with lowercase words for variables (ex: player name)
 * with lowercase words starting with a uppercase character for enumerations (ex: Error Type)
 * with uppercase snake case for packets and subpayloads (ex: CREATE_LOBBY)

Values are enclosed in boxes.
The minus signs (-) indicates the value is required and not repeated.
The tilde (~) indicates the value is optional and not repeated.
The equal sign (=) indicates the value is optional and repeated.

+-------+
| value |
+-------+

+================+
| repeated value |
+================+

+~~~~~~~~~~~~~~~~+
| optional value |
+~~~~~~~~~~~~~~~~+


## Packet type

The first byte of every packet determines its type. A payload may be placed after this first byte.

   1B       ?B
+------+-----------
| Type | payload...
+------+-----------

There are 16 packet types.



## Subpayloads

Subpayloads are sequences of bytes which are always defined after the same scheme. They often represent an entity with multiples properties.
They might be used several times in a packet or in packets with different types.


### LOBBY

     4B                 1B                           1B                         1B                 0B-255B
+----------+----------------------------+---------------------------+--------------------------+------------+
| lobby ID | amount of connected player | maximum amount of players | length of the lobby name | lobby name |
+----------+----------------------------+---------------------------+--------------------------+------------+

The length of the lobby name is an amount of bytes.



## Payload

### GET_LOBBY_LIST (client -> server)

 1B
+---+
| 0 |
+---+


### LOBBY_LIST (server -> client)

 1B    ?B
+---+=======+
| 1 | LOBBY |
+---+=======+


### CREATE_LOBBY (client -> server)

 1B              1B                  0B-255B
+---+---------------------------+------------+
| 2 | maximum amount of players | lobby name |
+---+---------------------------+------------+


### SET_NAME (client -> server)

 1B      0B-?B
+---+-------------+
| 3 | player name |
+---+-------------+


### SET_NAME_BROADCAST (client -> server)

 1B      1B          0B-?B
+---+-----------+-------------+
| 4 | player ID | player name |
+---+-----------+-------------+


### CONNECT (client -> server)

 1B      4B
+---+----------+
| 5 | lobby ID |
+---+----------+

The server will respond with either CONNECT_ACCEPTED or an ERROR.


### CONNECT_ACCEPTED (server -> client)

 1B       1B
+----+-----------+
| 6 | player ID |
+----+-----------+


### ERROR (server -> client)

 1B       1B
+---+------------+
| 7 | Error Type |
+---+------------+

Error Type must be either:
 0. no lobby avalaible
 1. no slot avalaible
 2. name taken
 3. name unknown


### LEAVE_LOBBY (client -> server)

 1B      4B
+---+----------+
| 8 | lobby ID |
+---+----------+

Note: as JumpSuit's client will only need to connect to one looby at once, in future versions the lobby ID will be assumed to be the only lobby the player is connected to.


### LOBBY_STATE (server -> client)

 1B       1B         1B
+---+-------------+-------+
| 9 | Lobby State | timer |
+---+-------------+-------+

Lobby State must be either:
 0. waiting for players
 1. game started
 2. game over


### WORLD (server -> client)

This packet represents the initial collection of entities.

  1B
+----+---------------+========+--------------+=======+---------------+========+======+
| 10 | planet amount | PLANET | enemy amount | ENEMY | player amount | PLAYER | SHOT |
+----+---------------+========+--------------+=======+---------------+========+======+

Note: this is yet encoded as JSON.


### GAME_STATE (server -> client)

  1B
+----+---
| 11 |
+----+--

Note: this is yet encoded as JSON.


### PLAYER_CONTROLS (client -> server)

  1B      2b         1b    1b      1b       1b         1b           1b
+----+-------------+------+-----+--------+---------+-----------+------------+
| 12 | unused bits | jump | run | crouch | jetpack | move left | move right |
+----+-------------+------+-----+--------+---------+-----------+------------+

The values of jump, run, crouch, jetpack, move left and move right are 1 if enabled, 0 if not.
This is a bit field.
Note: two unused bits are present to complete a byte.


### CHAT (client -> server)

  1B     1B
+----+---------+
| 13 | message |
+----+---------+


### CHAT_BROADCAST (server -> client)

  1B      1B         ?B
+----+-----------+---------+
| 14 | player ID | message |
+----+-----------+---------+

Note: this is yet encoded as JSON.


### ADD_ENTITY (server -> client)

  1B
+----+---------
| 15 |
+----+---------


### REMOVE_ENTITY (server -> client)

  1B
+----+---------
| 16 |
+----+---------


### SCORES (server -> client)

  1B       1B            1B           4B                  4B
+----+------------+-------------+------------------+-------------------+
| 17 | First Team | Second Team | first team score | second team score |
+----+------------+-------------+------------------+-------------------+

The First Team and Second Team must be:
 0. beige team
 1. blue team
 2. green team
 3. pink team
 4. yellow team
